import argparse 
from iscard.core import get_coverages_from_bed, create_model,test_sample,plot_sample,bedgraph_sample

def depth_cmd(args):
	print("salut")

parser = argparse.ArgumentParser()
subparsers = parser.add_subparsers(title="sub command",dest='subcommand')


depth_parser = subparsers.add_parser('depth')
depth_parser.add_argument("-b", "--bam", help="one or more bam file", nargs="+", required=True)
depth_parser.add_argument("-r", "--region", help="a bed file ", required=True)
depth_parser.add_argument("-o", "--output", help="a csv file ", required=True)
depth_parser.add_argument("-w", "--window", help="grouped position by a window ", default=None)
depth_parser.add_argument("-a", "--aggregate", help="aggregate depth value within a window ", default="mean", choices = ["mean","min","max","sum","median"])


learn_parser = subparsers.add_parser('learn')
learn_parser.add_argument("-b", "--bam", nargs="+", help="bam files")
learn_parser.add_argument("-r", "--region", help="bed region used by amplicon sequencing")
learn_parser.add_argument("-o", "--output", help="output hdf5 learning model")
learn_parser.add_argument("-w", "--window", help="window size")
learn_parser.add_argument("-a", "--aggregate", help="aggregate function")

test_parser = subparsers.add_parser('test')
test_parser.add_argument("-b", "--bam", help="Bam file to test ")
test_parser.add_argument("-m", "--model", help="Model")
test_parser.add_argument("-o", "--output", help="result")


test_parser = subparsers.add_parser('bedgraph')
test_parser.add_argument("-i", "--input", help="test file")
test_parser.add_argument("-v", "--value", help="mean, sample, sample_z")


test_parser = subparsers.add_parser('plot')
test_parser.add_argument("-i", "--input", help="test file", required=True)
test_parser.add_argument("-o", "--output", help="output results as a bedgraph", required=True)
test_parser.add_argument("-n", "--name", help="region name")
test_parser.add_argument("-c", "--coordinate", help="chr3:324234-234234", default=str())


test_parser = subparsers.add_parser('report')
test_parser.add_argument("-i", "--input", help="test file")
test_parser.add_argument("-m", "--model")
test_parser.add_argument("-o", "--output", help="output results as a bedgraph")




# test_parser = subparsers.add_parser('render')
# test_parser.add_argument("-r", "--result", help="result file generated by `iscard test`")
# test_parser.add_argument("-o", "--output", help="html output file")



args = parser.parse_args()


if "depth" in args.subcommand:
	df = get_coverages_from_bed(args.bam, args.region, args.window, args.aggregate)
	df.reset_index().to_hdf(args.output, key="raw", mode="w")

if "learn" in args.subcommand:
	create_model(args.bam, args.region, args.output, window=args.window, agg=args.aggregate)

if "test" in args.subcommand:
	test_sample(args.bam, args.model, args.output)

if "plot" in args.subcommand:
	plot_sample(args.input, args.name, args.coordinate, args.output)

if "bedgraph" in args.subcommand:
	bedgraph_sample(args.input, args.value)